{% extends "base.html" %}
{% block graph %}


<script src={{ url_for('static', filename='./js/sigma.min.js') }}></script>
<script src={{ url_for('static', filename='./plugins/sigma.plugins.dragNodes.min.js') }}></script>
<script src={{ url_for('static', filename='./plugins/sigma.plugins.filter.min.js') }}></script>
<script src={{ url_for('static', filename='./plugins/sigma.plugins.neighborhoods.min.js') }}></script>
<script src={{ url_for('static', filename='./plugins/sigma.renderers.customShapes.min.js') }}></script>
<script src={{ url_for('static', filename='./plugins/sigma.parsers.gexf.min.js') }}></script>

<div class="container">

	<div class="row" style="min-height:45vh;max-height:45vh;margin-top:0vh;">
		<div class="col-md-6 col-md-offset-3" style="margin-top:0vh;">
			<form name = "graphquery" method="GET">
				<div class="form-group text-center">
					<label style="font-weight:300; font-size:36px;">Select Year</label>
					<br />
						<select class="form-control" name="year">
							<option>2015</option>
							<option>2014</option>
							<option>2013</option>
							<option>2012</option>
							<option>2011</option>
							<option>2010</option>
							<option>2009</option>
						</select>
					<button type="submit" value="Send" name="graphyear-container" class="btn btn-default id-submit">Submit</button>
				</div>
			</form>

			<div class="form-group text-center">
				<label style="font-weight:100; font-size:20px;">Search for a particular subreddit</label>
				<br></br>
				<input type="text" id="txtSearch" placeholder="programming">
				<br></br>
				Try it: 
				<a href="#" onclick="onSearch('programming')"><label style="cursor:pointer">programming</label></a>,
				<a href="#" onclick="onSearch('unitedkingdom')"><label style="cursor:pointer">unitedkingdom</label></a>
				<br />
				Hint: double-click a node to select, whitespace to deselect 
				<br></br>
				<button id="btnSearchClick" onclick="getTxtVal()" class="btn btn-default id-submit">Search</button>
				<button id="btnResetZoom" onclick="resetGraph()" class="btn btn-default id-submit">Reset Zoom</button>
			</div>
		</div>
	</div>

	<div class="row" style="height:300vh;margin-top:0vh;">
		<a id= "graphloc"> </a>
		<div id="graph-container" style="min-width: 310px; min-height: 800px; margin: 0 auto">
		</div>
		
	</div>
</div>

<script>

var animationDuration = 2000;
var headerHeight = $("#navbar").height();
var scrollToPosition = $("#graphloc").offset().top - headerHeight;

var completeCalled = false;

$("html, body").animate(
    { scrollTop: scrollToPosition },
    {
        complete : function(){
            if(!completeCalled){
                completeCalled = true;
            }
        }
    },
    animationDuration
);

var zoomFactor = 0.3;
var maxNodeSize = 1;
var fn = '{{ fn |safe }}';
//console.log(fn);

sigma.prototype.zoomToNode = function(node, ratio, camera){
	if(typeof camera == "undefined"){
		 camera = this.cameras[0];
	}
	camera.ratio = ratio;
	camera.x = node[camera.readPrefix+"x"];
	camera.y = node[camera.readPrefix+"y"]; 
	this.refresh();
};

sigma.prototype.resetZoom = function(camera){
    if(typeof camera == "undefined"){
        camera = this.cameras[0];
    }
    camera.ratio = 1;
    camera.x = 0;
    camera.y = 0;   
    this.refresh();
};

sigma.classes.graph.addMethod('neighbors', function(nodeId) {
    var k,
        neighbors = {},
        index = this.allNeighborsIndex[nodeId] || {};

    for (k in index)
      neighbors[k] = this.nodesIndex[k];

    return neighbors;
  });

var sig = new sigma();

cam = sig.addCamera();

sig.addRenderer({
  container: document.getElementById('graph-container'),
  type: 'canvas',
  camera: cam,
  settings: {
    batchEdgesDrawing: true,
    hideEdgesOnMove: true,
    //defaultLabelColor: '#000',
    //defaultNodeColor: '#666',
    //defaultEdgeColor: '#999',
    //edgeColor: 'default',
    doubleClickEnabled: false,
    minEdgeSize: 0.5,
    maxEdgeSize: 1.5,
    minNodeSize: 0.5,
    maxNodeSize: 0.5,
    labelThreshold: 20,
    enableEdgeHovering: true,
    edgeHoverColor: 'edge',
    defaultEdgeHoverColor: '#000',
    edgeHoverSizeRatio: 1,
    edgeHoverExtremities: true,
    defaultLabelSize: 12,
    zoomMin: 0.02
  }
});

sigma.parsers.gexf(
  fn,
  sig,
  function(s) {
	s.graph.nodes().forEach(function(n) {
		n.originalColor = n.color;
	});
	s.graph.edges().forEach(function(e) {
		e.originalColor = e.color;
		e.type = 'curve';
	});
	s.refresh();

   s.bind('doubleClickNode', function(e) {
		var nodeId = e.data.node.id;
		toKeep = s.graph.neighbors(nodeId);
		toKeep[nodeId] = e.data.node;

		s.graph.nodes().forEach(function(n) {
			if (toKeep[n.id]){
				n.color = n.originalColor;
			}
			else{
				n.color = "rgba(190,190,190,0.1)";
		};
	});

	s.graph.edges().forEach(function(e) {
		if (toKeep[e.source] && toKeep[e.target]){
			e.color = e.originalColor;
			}
		else{
			e.color = "rgba(190,190,190,0.1)";;
			};
		});

		s.zoomToNode(e.data.node, zoomFactor, s.camera)
		s.refresh();
	});

	// When the stage is clicked, we just color each
	// node and edge with its original color.
	s.bind('doubleClickStage', function(e) {
		s.graph.nodes().forEach(function(n) {
			n.color = n.originalColor;
		});

		s.graph.edges().forEach(function(e) {
			e.color = e.originalColor;
			//e.size = e.oriiginalSize;
		});

		// Same as in the previous event:
		s.refresh();
	}); 

	//s.startForceAtlas2({worker: true, barnesHutOptimize: false});
});

// Get text value
function getTxtVal(){
	var txtvalue = document.getElementById('txtSearch').value;
	onSearch(txtvalue);
}

var BreakException= {};

function onSearch(txtvalue){
	try {
		sig.graph.nodes().forEach(function(n) {
			if (n.label == txtvalue){
				var nodeId = n.id,	
				toKeep = sig.graph.neighbors(nodeId);
				toKeep[nodeId] = n;

				sig.graph.nodes().forEach(function(g) {
					if (toKeep[g.id]){
						g.color = g.originalColor;
						}
					else{
						g.color = "rgba(190,190,190,0.1)";
						};
					});

				sig.graph.edges().forEach(function(e) {
					if (toKeep[e.source] && toKeep[e.target]){
						e.color = e.originalColor;
					}
					else{
						e.color = "rgba(190,190,190,0.1)";
					};
				});

				sig.zoomToNode(n, zoomFactor, sig.camera)
				sig.refresh();
				
				$("html, body").animate(
				 { scrollTop: scrollToPosition },
				 {
					  complete : function(){
						   if(!completeCalled){
						       completeCalled = true;
						   }
					  }
				 },
				 animationDuration
				);

				throw BreakException;
			};
		});
	} catch(e) {
		if (e!==BreakException) throw e;
	};
};

function resetGraph(){
	sig.resetZoom(sig.camera);
	$("html, body").animate(
    { scrollTop: scrollToPosition },
    {
        complete : function(){
            if(!completeCalled){
                completeCalled = true;
            }
        }
    },
    animationDuration
);

};

</script>

<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-73417322-1', 'auto');
  ga('send', 'pageview');

</script>
{% endblock %}

